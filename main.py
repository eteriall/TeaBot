import datetime
import json
import logging
import os

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, RegexHandler, MessageHandler
from tzlocal import get_localzone

from create_excel import export

tz = get_localzone()
logging.basicConfig(filename='main.log',
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
                    )
logger = logging.getLogger(__name__)

morning_tea_time = datetime.time(hour=16, minute=00, second=00)
evening_tea_time = datetime.time(hour=20, minute=00, second=00)

morning_sending_time = datetime.time(hour=12, minute=40, second=0, microsecond=0)
evening_sending_time = datetime.time(hour=17, minute=00, second=0, microsecond=0)


def load_base():
    with open('db.json') as f:
        data = json.load(f)
    return dict(data)


def save_base(data):
    with open('db.json', mode='w') as f:
        json.dump(data, f, ensure_ascii=False)


def load_calls():
    with open('calls.json') as f:
        data = json.load(f)
    return dict(data)


def save_calls(data):
    with open('calls.json', mode='w') as f:
        json.dump(data, f, ensure_ascii=False)


def add_user(uid, uname, name, room):
    uid = str(uid)
    data = load_base()
    if uid in data:
        prefs = data[uid]['prefs']
    else:
        prefs = []
    data[uid] = {'uid': uid, "uname": uname, "room": room, "name": name, "prefs": prefs}
    save_base(data)


def change_room(update: Update, context: CallbackContext) -> None:
    u = update.message.from_user
    db = load_base()
    n = update.message.text
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.name} –ø–æ–º–µ–Ω—è–ª –∫–æ–º–Ω–∞—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º "{n}"')
    if len(n) != 3:
        update.message.reply_text(
            '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ.\n\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —è —Å–º–æ–≥—É '
            '–ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!')
    else:
        if u.id not in db:
            add_user(u.id, u.username, u.name, update.message.text)
        else:
            db[str(u.id)]['room'] = update.message.text
        update.message.reply_text(
            '–ù–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑! ‚úÖ')

        calls = load_calls()
        last_call = max(calls.keys(), key=lambda x: eval(x))
        if str(u.id) not in calls[last_call]['receivers']:
            lc = eval(last_call)
            tea_call(context, tea_datetime=eval(last_call), message_time=f"{lc[0]} –∞–≤–≥—É—Å—Ç–∞ –≤ {lc[1]}")


def start(update: Update, context: CallbackContext) -> None:
    u = update.message.from_user
    db = load_base()
    if str(u.id) not in db:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.name} –Ω–∞—á–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É')
        update.message.reply_text('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º - –ø—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã ‚ÄºÔ∏è')
    else:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {u.name} –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É start')
        update.message.reply_text(
            '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ.\n\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!')


def morning_tea_call(context: CallbackContext, uid=None):
    d, time = datetime.datetime.now().day, f'{morning_tea_time.hour}:' + str(morning_tea_time.minute).rjust(2, '0')
    message_time = f"—Å–µ–≥–æ–¥–Ω—è –≤ {time}"
    logger.info(f'–ó–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {time} {d} –∞–≤–≥—É—Å—Ç–∞ (—É—Ç—Ä–µ–Ω–Ω–∏–π —á–∞–π)')
    tea_call(context, tea_datetime=(d, time), message_time=message_time, uid=uid)


def evening_tea_call(context: CallbackContext, uid=None):
    d, time = datetime.datetime.now().day, f'{evening_tea_time.hour}:' + str(evening_tea_time.minute).rjust(2, '0')
    message_time = f"—Å–µ–≥–æ–¥–Ω—è –≤ {time}"
    logger.info(f'–ó–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏—ë–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {time} {d} –∞–≤–≥—É—Å—Ç–∞ (–≤–µ—á–µ—Ä–Ω–∏–π —á–∞–π)')
    tea_call(context, tea_datetime=(d, time), message_time=message_time, uid=uid)


def tea_call(context, tea_datetime, message_time, uid=None):
    calls = load_calls()
    if str(tea_datetime) not in calls:
        calls[str(tea_datetime)] = {'receivers': []}

    message = f"–ö–∞–∫–æ–π —á–∞–π —Ç–µ–±–µ –ø—Ä–∏–Ω–µ—Å—Ç–∏ {message_time}? üçÉ"
    tea_datetime_f = f"{tea_datetime[0]};{tea_datetime[1]}"

    db = load_base()
    keyboard = [
        [
            InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π —á–∞–π", callback_data=f"{tea_datetime_f};b"),
            InlineKeyboardButton("–ó–µ–ª—ë–Ω—ã–π —á–∞–π", callback_data=f'{tea_datetime_f};g'),
        ],
        [InlineKeyboardButton("–ö–∏–ø—è—Ç–æ–∫", callback_data=f'{tea_datetime_f};h')],
        [InlineKeyboardButton("–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –±—É–¥—É", callback_data=f'{tea_datetime_f};n')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if uid is None:
        for id in db:
            if str(id) not in calls[str(tea_datetime)]['receivers']:
                context.bot.send_message(chat_id=id, reply_markup=reply_markup, text=message)
                logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —á–∞—è ({tea_datetime}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {uid}')
                calls[str(tea_datetime)]['receivers'] += [str(id)]
        save_calls(calls)
    else:
        if str(uid) not in calls[str(tea_datetime)]['receivers']:
            logger.info(f'–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —á–∞—è ({tea_datetime}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {uid}')
            context.bot.send_message(chat_id=uid, reply_markup=reply_markup, text=message)
            calls[str(tea_datetime)]['receivers'] += [str(uid)]
        save_calls(calls)


def send_excel(update: Update, context: CallbackContext):
    logger.info(f"–§–∞–π–ª —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω {update.message.from_user.name}")
    export('tea.xlsx')
    update.message.reply_document(
        document=open("tea.xlsx", "rb"),
        filename="TeaData.xlsx",
        caption="`–ü–æ–∂–µ–ª–∞–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–º–µ–Ω—ã –≤ –ö–∞–ª–∏–Ω–∏–≥—Ä–∞–¥–µ.\n\n–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @a_rassk`",
        parse_mode='markdown'
    )


def send_logs(update: Update, context: CallbackContext):
    logger.info(f"–õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω {update.message.from_user.name}")
    update.message.reply_document(
        document=open("main.log", "rb"),
        filename="TeaLogs.log",
        caption="`–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞.\n\n–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @a_rassk`",
        parse_mode='markdown'
    )


def button(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()
        uid = query.from_user.id

        db = load_base()
        db[str(uid)]['prefs'] += [query.data]
        save_base(db)

        order_day, order_time, selection = query.data.split(';')
        today = datetime.datetime.now().day
        order_day = int(order_day)

        if order_day == today:
            f_day = '–°–µ–≥–æ–¥–Ω—è'
        elif order_day + 1 == today:
            f_day = '–ó–∞–≤—Ç—Ä–∞'
        else:
            f_day = f"{order_day} –∞–≤–≥—É—Å—Ç–∞"
        f_day += f' –≤ {order_time}'
        if selection == 'n':
            query.edit_message_text(text=f"–•–æ—Ä–æ—à–æ, –ø—Ä–∏–Ω—è–ª")
        else:
            selection_d = {'b': '—á—ë—Ä–Ω—ã–π —á–∞–π', 'g': '–∑–µ–ª—ë–Ω—ã–π —á–∞–π', 'h': '–∫–∏–ø—è—Ç–æ–∫'}
            logger.info(query.from_user.name + " –≤—ã–±—Ä–∞–ª/–∞ " + selection_d[selection])
            query.edit_message_text(text=f"{f_day} –≤ –∫–æ–º–Ω–∞—Ç—É {db[str(uid)]['room']} –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {selection_d[selection]}.")

    except Exception as e:
        logger.exception(f"{e, update.callback_query.from_user.id, update.callback_query.data }")


def help_command(update: Update, context: CallbackContext) -> None:
    logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.name} –ø—Ä–∏—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                 f"–∫–æ—Ç–æ—Ä–æ–µ –Ω–∏–∫–∞–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ—Å—å - '{update.message.text}'")
    update.message.reply_text(
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç—ã - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ.\n\n–¢–µ–±–µ –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!")


def main():
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater = Updater(os.environ.get('BOT_KEY'))

    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(button))
    updater.dispatcher.add_handler(RegexHandler(callback=change_room, pattern=r"\d{3}"))
    updater.dispatcher.add_handler(CommandHandler('file', send_excel))
    updater.dispatcher.add_handler(CommandHandler('logs', send_logs))
    updater.dispatcher.add_handler(MessageHandler(callback=help_command, filters=None))

    j = updater.job_queue
    j.scheduler.configure(timezone=tz)

    morning_tea = j.run_daily(morning_tea_call, time=morning_sending_time)
    evening_tea = j.run_daily(evening_tea_call, time=evening_sending_time)

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
